import os

configfile:
    "config.yml"
if not os.path.isdir(config["DATA_DIR"]):
    raise Exception("Cannot find the dataset at %s" % config["DATA_DIR"])
if os.system("module list") == 0:
    # then we're on the cluster
    ON_CLUSTER = True
    shell.prefix(". /share/apps/anaconda3/5.3.1/etc/profile.d/conda.sh; conda activate retinotopy; "
                 "module load fsl/5.0.10; module load freesurfer/6.0.0; module load matlab/2017a; "
                 "export SUBJECTS_DIR=%s; " % config["SUBJECTS_DIR"])
else:
    ON_CLUSTER = False
    shell.prefix("export SUBJECTS_DIR=%s; " % config["SUBJECTS_DIR"])


wildcard_constraints:
    subject="(sub-)?[a-z0-9]+",
    session="(ses-)?[a-z0-9]+",
    run="run-[0-9]+",
    task="(task-)?[a-z0-9]+",
    filename_ext='[a-zA-Z0-9_]+\.[a-z.]+',
    filename='[a-zA-Z0-9_]+',


rule bayesian_retinotopy_all:
    input:
        [os.path.join(config["DATA_DIR"], "derivatives", "vistasoft", "{subject}", "{session}", "Outputs", "lh.inferred_sigma.mgz").format(subject=sub, session=ses) for sub in config['SUBJECTS'] for ses in config['SESSIONS'][sub]]


rule preprocess_all:
    input:
        [os.path.join(config["DATA_DIR"], "derivatives", "preprocessed", "{subject}", "{session}", "{subject}_{session}_{task}_{run}_preproc.nii.gz").format(subject=sub, session=ses, task=config['TASKS'].get(sub, {}).get(ses, 'task-prf'), run="run-%02d"%i) for sub in config['SUBJECTS'] for ses in config['SESSIONS'][sub] for i in range(1, config['NRUNS'].get(sub, {}).get(ses, 6)+1)],


rule move_all:
    input:
        [os.path.join(config['DATA_DIR'], '{subject}', '{session}').format(subject=subj, session=ses)
         for subj in config['SUBJECTS'] for ses in config['SESSIONS'][subj]],
        [os.path.join(config['SUBJECTS_DIR'], '{subject}').format(subject=subj.replace('sub-', ''))
         for subj in config['SUBJECTS']]


rule move_off_tesla:
    input:
        os.path.join(config["TESLA_DIR"], "{subject}", "{session}"),
        os.path.join(config["TESLA_DIR"], "sourcedata", "{subject}", "{session}"),
    output:
        directory(os.path.join(config["DATA_DIR"], "{subject}", "{session}")),
        directory(os.path.join(config["DATA_DIR"], "sourcedata", "{subject}", "{session}")),
        directory(os.path.join(config["DATA_DIR"], "derivatives", "mriqc_reports", "{subject}", "{session}")),
    log:
        os.path.join(config["DATA_DIR"], "code", "move_off_tesla", "{subject}_{session}-%j.log")
    benchmark:
        os.path.join(config["DATA_DIR"], "code", "move_off_tesla", "{subject}_{session}_benchmark.txt")
    run:
        import glob
        import shutil
        import os
        os.makedirs(output[2])
        reports_path = os.path.join(config["TESLA_DIR"], "derivatives", "mriqc_reports", "{subject}_{session}_*").format(**wildcards)
        for f in glob.glob(reports_path):
            shutil.copy(f, output[2])
        shell("rsync --exclude=*events.tsv -avPLuz %s/ %s" % (input[0], output[0]))
        shell("rsync -avPLuz %s/ %s" % (input[1], output[1]))


rule move_freesurfer_off_tesla:
    input:
        os.path.join(config['TESLA_ANATOMY_DIR'], 'derivatives', 'freesurfer', 'sub-{subject}')
    output:
        directory(os.path.join(config['SUBJECTS_DIR'], '{subject}'))
    log:
        os.path.join(config["DATA_DIR"], "code", "move_freesurfer_off_tesla", "sub-{subject}-%j.log")
    benchmark:
        os.path.join(config["DATA_DIR"], "code", "move_freesurfer_off_tesla", "sub-{subject}_benchmark.txt")
    shell:
        "rsync -avPLuz {input}/ {output}"


def get_preprocess_inputs(wildcards):
    input_dict = {}
    input_dict['freesurfer_files'] = os.path.join(config["SUBJECTS_DIR"], wildcards.subject.replace('sub-', ''))
    input_dict['func_files'] = os.path.join(config["DATA_DIR"], "{subject}", "{session}", "func",
                                            "{subject}_{session}_{task}_acq-PA_{run}_bold.nii.gz").format(**wildcards)
    return input_dict


# This is a little confusing looking because we want to allow each run to be analyzed in a separate
# job, for ease of parallelization
rule preprocess:
    input:
        unpack(get_preprocess_inputs)
    output:
        os.path.join(config["DATA_DIR"], "derivatives", "preprocessed_{run}_{task}", "{subject}", "{session}", "{subject}_{session}_{task}_acq-PA_{run}_preproc.nii.gz"),
        os.path.join(config["DATA_DIR"], "derivatives", "preprocessed_{run}_{task}", "{subject}", "{session}", "session.json"),
        os.path.join(config["DATA_DIR"], "derivatives", "preprocessed_{run}_{task}", "{subject}", "{session}", "sbref_reg_corrected.nii.gz"),
        os.path.join(config["DATA_DIR"], "derivatives", "preprocessed_{run}_{task}", "{subject}", "{session}", "distort2anat_tkreg.dat"),
        os.path.join(config["DATA_DIR"], "derivatives", "preprocessed_{run}_{task}", "{subject}", "{session}", "distortion_merged_corrected.nii.gz"),
        os.path.join(config["DATA_DIR"], "derivatives", "preprocessed_{run}_{task}", "{subject}", "{session}", "distortion_merged_corrected_mean.nii.gz"),
    resources:
        cpus_per_task = 10,
        mem = 48
    params:
        plugin = "MultiProc",
        data_dir = lambda wildcards: os.path.join(config['DATA_DIR'], wildcards.subject, wildcards.session),
        working_dir = lambda wildcards: os.path.join(config['WORKING_DIR'], "%s_%s_%s" % (wildcards.subject, wildcards.session, wildcards.run)),
        plugin_args = lambda wildcards, resources: ",".join("%s:%s" % (k,v) for k,v in {'n_procs': resources.cpus_per_task, 'memory_gb': resources.mem}.items()),
        epi_num = lambda wildcards: int(wildcards.run.replace('run-', '')),
        script_location = os.path.join("..", "preprocessing", "prisma_preproc.py")
    benchmark:
        os.path.join(config["DATA_DIR"], "code", "preprocessed", "{subject}_{session}_{task}_{run}_benchmark.txt")
    log:
        os.path.join(config["DATA_DIR"], "code", "preprocessed", "{subject}_{session}_{task}_{run}-%j.log")
    shell:
        # we want to remove the working directory afterwards because it's big and contains many
        # files. it means that re-runs will take slightly longer, but since I was starting to run
        # into the number of files quota on the cluster, it's worth it.
        "python {params.script_location} -datadir {params.data_dir} -working_dir "
        "{params.working_dir} -plugin {params.plugin} -dir_structure bids -plugin_args "
        "{params.plugin_args} -epis {params.epi_num} -bids_derivative_name "
        "preprocessed_{wildcards.run}_{wildcards.task}; rm -rf {params.working_dir};"


rule rearrange_preprocess_extras:
    input:
        lambda wildcards: expand(os.path.join(config["DATA_DIR"], "derivatives", "preprocessed_run-{n:02d}_{task}", wildcards.subject, wildcards.session, wildcards.filename_ext), task=config['TASKS'].get(wildcards.subject, {}).get(wildcards.session, 'task-prf'), n=range(1, config['NRUNS'].get(wildcards.subject, {}).get(wildcards.session, 6)+1))
    output:
        os.path.join(config["DATA_DIR"], "derivatives", "preprocessed", "{subject}", "{session}", "{filename_ext}")
    log:
        os.path.join(config["DATA_DIR"], "code", "preprocessed", "{subject}_{session}_rearrange_extras_{filename_ext}-%j.log")
    benchmark:
        os.path.join(config["DATA_DIR"], "code", "preprocessed", "{subject}_{session}_rearrange_extras_{filename_ext}_benchmark.txt")
    run:
        import subprocess
        import os
        import shutil
        import json
        if os.path.split(input[0])[-1] == 'session.json':
            # we handle this differently, because we want to merge the jsons instead
            master_json = {}
            for filename in input:
                run_name = os.path.abspath(filename).split(os.sep)[-2]
                with open(filename) as f:
                    master_json[run_name] = json.load(f)
                os.remove(filename)
            with open(output[0], 'w') as f:
                json.dump(master_json, f)
        else:
            file1 = input[0]
            for file2 in input[1:]:
                if subprocess.call(['cmp', '-s', file1, file2]) == 1:
                    raise Exception("%s and %s are different, they should be the same!" % (file1, file2))
                else:
                    os.remove(file2)
            shutil.move(file1, output[0])

rule rearrange_preprocess:
    input:
        os.path.join(config["DATA_DIR"], "derivatives", "preprocessed_{run}_{task}", "{subject}", "{session}", "{subject}_{session}_{task}_acq-PA_{run}_preproc.nii.gz"),
        os.path.join(config["DATA_DIR"], "derivatives", "preprocessed", "{subject}", "{session}", "session.json"),
        os.path.join(config["DATA_DIR"], "derivatives", "preprocessed", "{subject}", "{session}", "sbref_reg_corrected.nii.gz"),
        os.path.join(config["DATA_DIR"], "derivatives", "preprocessed", "{subject}", "{session}", "distort2anat_tkreg.dat"),
        os.path.join(config["DATA_DIR"], "derivatives", "preprocessed", "{subject}", "{session}", "distortion_merged_corrected.nii.gz"),
        os.path.join(config["DATA_DIR"], "derivatives", "preprocessed", "{subject}", "{session}", "distortion_merged_corrected_mean.nii.gz"),
    output:
        # we drop the acq-PA bit because all of our scans have that, so it's not informative
        os.path.join(config["DATA_DIR"], "derivatives", "preprocessed", "{subject}", "{session}", "{subject}_{session}_{task}_{run}_preproc.nii.gz"),
    log:
        os.path.join(config["DATA_DIR"], "code", "preprocessed", "{subject}_{session}_{task}_{run}_rearrange-%j.log")
    benchmark:
        os.path.join(config["DATA_DIR"], "code", "preprocessed", "{subject}_{session}_{task}_{run}_rearrange_benchmark.txt")
    run:
        import shutil
        import os
        shutil.move(input[0], output[0])
        os.removedirs(os.path.dirname(input[0]))


# if we could make symlinks on the server, we wouldn't need this rule (it gets done automatically
# within bidsInitVista.m, which gets called by bids_retinotopy.m but needs a symlink to work)
rule vistasoft_anat:
    input:
        lambda wildcards: os.path.join(config['SUBJECTS_DIR'], "{subject}", 'mri', 'T1.mgz').format(subject=wildcards.subject.replace('sub-', ''))
    output:
        os.path.join(config["DATA_DIR"], "derivatives", "vistasoft", "{subject}", "{session}", "3DAnatomy", "t1.nii.gz"),
        os.path.join(config["DATA_DIR"], "derivatives", "vistasoft", "{subject}", "{session}", "3DAnatomy", "t1_class.nii.gz"),
    benchmark:
        os.path.join(config['DATA_DIR'], 'code', 'vistasoft_anat', '{subject}_{session}_benchmark.txt')
    log:
        os.path.join(config['DATA_DIR'], 'code', 'vistasoft_anat', '{subject}_{session}-%j.log')
    params:
        fs_subject = lambda wildcards: wildcards.subject.replace('sub-', '')
    run:
        import os
        if os.path.exists(os.path.join(config['ANATOMY_DIR'], params.fs_subject)):
            shell("rsync -avPLuz %s %s" % (os.path.join(config['ANATOMY_DIR'], params.fs_subject),
                                           os.path.dirname(output[0])))
        else:
            shell("mri_convert -i %s -o %s; " % (input, output[0]))
            shell("matlab -nodesktop -nodisplay -r \"addpath(genpath('%s')); "
                  "fs_ribbon2itk('%s', '%s'); quit;\"" %
                  (config['VISTASOFT_DIR'], params.fs_subject, output[1]))


rule solve_prfs:
    input:
        lambda wildcards: [os.path.join(config['DATA_DIR'], "derivatives", "preprocessed",  "{subject}",
                                        "{session}", "{subject}_{session}_task-{task}_run-{run:02d}_preproc.nii.gz").format(run=n, **wildcards)
                           for n in range(1, config['NRUNS'].get(wildcards.subject, {}).get(wildcards.session, 6)+1)],
        os.path.join(config["DATA_DIR"], "derivatives", "vistasoft", "{subject}", "{session}", "3DAnatomy", "t1_class.nii.gz"),
    output:
        os.path.join(config["DATA_DIR"], "derivatives", "vistasoft", "{subject}", "{session}", "Gray", "{task}", "rm_{task}-fFit.mat"),
        os.path.join(config["DATA_DIR"], "derivatives", "vistasoft", "{subject}", "{session}", "Gray", "{task}", "rm_{task}-sFit.mat"),
        os.path.join(config["DATA_DIR"], "derivatives", "vistasoft", "{subject}", "{session}", "Gray", "{task}", "rm_{task}-gFit.mat"),
        os.path.join(config["DATA_DIR"], "derivatives", "vistasoft", "{subject}", "{session}", "Gray", "{task}", "sigma.nii.gz"),
        os.path.join(config["DATA_DIR"], "derivatives", "vistasoft", "{subject}", "{session}", "Gray", "{task}", "vexpl.nii.gz"),
        os.path.join(config["DATA_DIR"], "derivatives", "vistasoft", "{subject}", "{session}", "Gray", "{task}", "xcrds.nii.gz"),
        os.path.join(config["DATA_DIR"], "derivatives", "vistasoft", "{subject}", "{session}", "Gray", "{task}", "ycrds.nii.gz"),
        os.path.join(config["DATA_DIR"], "derivatives", "vistasoft", "{subject}", "{session}", "Gray", "{task}", "TSeries", "Scan1", "tSeries1.mat"),
        os.path.join(config["DATA_DIR"], "derivatives", "vistasoft", "{subject}", "{session}", "Inplane", "{task}", "TSeries", "tSeriesScan1.nii.gz"),
    benchmark:
        os.path.join(config['DATA_DIR'], 'code', 'solve_prfs', '{subject}_{session}_task-{task}_benchmark.txt')
    log:
        os.path.join(config['DATA_DIR'], 'code', 'solve_prfs', '{subject}_{session}-task-{task}_%j.log')
    params:
        vistasoft_path = config['VISTASOFT_DIR'],
        bids_dir = config['DATA_DIR'],
    shell:
        "matlab -nodesktop -nodisplay -r \"addpath(genpath('{params.vistasoft_path}')); "
        "addpath(genpath('..')); bids_retinotopy('{params.bids_dir}', '{wildcards.subject}', "
        "'{wildcards.session}', 'task-{wildcards.task}'); quit;\""


rule export_niftis:
    input:
        lambda wildcards: os.path.join(config["DATA_DIR"], "derivatives", "vistasoft", "{subject}", "{session}", "Gray", "{task}", "rm_{task}-fFit.mat").format(task=config['TASKS'].get(wildcards.subject, {}).get(wildcards.session, 'prf').replace('task-', ''), **wildcards),
    output:
        os.path.join(config["DATA_DIR"], "derivatives", "vistasoft", "{subject}", "{session}", "Outputs", "full-sigma.nii.gz"),
        os.path.join(config["DATA_DIR"], "derivatives", "vistasoft", "{subject}", "{session}", "Outputs", "full-vexpl.nii.gz"),
        os.path.join(config["DATA_DIR"], "derivatives", "vistasoft", "{subject}", "{session}", "Outputs", "full-xcrds.nii.gz"),
        os.path.join(config["DATA_DIR"], "derivatives", "vistasoft", "{subject}", "{session}", "Outputs", "full-ycrds.nii.gz"),
    benchmark:
        os.path.join(config['DATA_DIR'], 'code', 'export_niftis', '{subject}_{session}_benchmark.txt')
    log:
        os.path.join(config['DATA_DIR'], 'code', 'export_niftis', '{subject}_{session}-%j.log')
    params:
        vistasoft_path = config['VISTASOFT_DIR'],
        bids_dir = config['DATA_DIR'],
        task = lambda wildcards: config['TASKS'].get(wildcards.subject, {}).get(wildcards.session, 'task-prf')
    shell:
        "matlab -nodesktop -nodisplay -r \"addpath(genpath('{params.vistasoft_path}')); "
        "addpath(genpath('..')); bids_export_niftis('{params.bids_dir}', '{wildcards.subject}', "
        "'{wildcards.session}', '{params.task}'); quit;\""


rule postproc_prfs:
    input:
        os.path.join(config["DATA_DIR"], "derivatives", "vistasoft", "{subject}", "{session}", "Outputs", "full-sigma.nii.gz"),
        os.path.join(config["DATA_DIR"], "derivatives", "vistasoft", "{subject}", "{session}", "Outputs", "full-vexpl.nii.gz"),
        os.path.join(config["DATA_DIR"], "derivatives", "vistasoft", "{subject}", "{session}", "Outputs", "full-xcrds.nii.gz"),
        os.path.join(config["DATA_DIR"], "derivatives", "vistasoft", "{subject}", "{session}", "Outputs", "full-ycrds.nii.gz"),
    output:
        os.path.join(config["DATA_DIR"], "derivatives", "vistasoft", "{subject}", "{session}", "Outputs", "lh.full-sigma.mgz"),
        os.path.join(config["DATA_DIR"], "derivatives", "vistasoft", "{subject}", "{session}", "Outputs", "lh.full-vexpl.mgz"),
        os.path.join(config["DATA_DIR"], "derivatives", "vistasoft", "{subject}", "{session}", "Outputs", "lh.full-angle.mgz"),
        os.path.join(config["DATA_DIR"], "derivatives", "vistasoft", "{subject}", "{session}", "Outputs", "lh.full-eccen.mgz"),
        os.path.join(config["DATA_DIR"], "derivatives", "vistasoft", "{subject}", "{session}", "Outputs", "lh.full-xcrds.mgz"),
        os.path.join(config["DATA_DIR"], "derivatives", "vistasoft", "{subject}", "{session}", "Outputs", "lh.full-ycrds.mgz"),
        os.path.join(config["DATA_DIR"], "derivatives", "vistasoft", "{subject}", "{session}", "Outputs", "rh.full-sigma.mgz"),
        os.path.join(config["DATA_DIR"], "derivatives", "vistasoft", "{subject}", "{session}", "Outputs", "rh.full-vexpl.mgz"),
        os.path.join(config["DATA_DIR"], "derivatives", "vistasoft", "{subject}", "{session}", "Outputs", "rh.full-angle.mgz"),
        os.path.join(config["DATA_DIR"], "derivatives", "vistasoft", "{subject}", "{session}", "Outputs", "rh.full-eccen.mgz"),
        os.path.join(config["DATA_DIR"], "derivatives", "vistasoft", "{subject}", "{session}", "Outputs", "rh.full-xcrds.mgz"),
        os.path.join(config["DATA_DIR"], "derivatives", "vistasoft", "{subject}", "{session}", "Outputs", "rh.full-ycrds.mgz"),
    benchmark:
        os.path.join(config['DATA_DIR'], 'code', 'postproc_prfs', '{subject}_{session}_benchmark.txt')
    log:
        os.path.join(config['DATA_DIR'], 'code', 'postproc_prfs', '{subject}_{session}-%j.log')
    params:
        fs_subject = lambda wildcards: wildcards.subject.replace('sub-', ''),
        output_dir = lambda wildcards, output: os.path.dirname(output[0]),
    shell:
        "python postproc_pRFs.py {params.fs_subject} {params.output_dir} -v"


rule atlas_generation:
    input:
        os.path.join(config['SUBJECTS_DIR'], '{subject}')
    output:
        os.path.join(config['SUBJECTS_DIR'], '{subject}', "surf", "lh.benson14_varea.mgz"),
        os.path.join(config['SUBJECTS_DIR'], '{subject}', "surf", "lh.benson14_eccen.mgz"),
        os.path.join(config['SUBJECTS_DIR'], '{subject}', "surf", "lh.benson14_angle.mgz"),
        os.path.join(config['SUBJECTS_DIR'], '{subject}', "surf", "lh.benson14_sigma.mgz"),
        os.path.join(config['SUBJECTS_DIR'], '{subject}', "surf", "rh.benson14_varea.mgz"),
        os.path.join(config['SUBJECTS_DIR'], '{subject}', "surf", "rh.benson14_eccen.mgz"),
        os.path.join(config['SUBJECTS_DIR'], '{subject}', "surf", "rh.benson14_angle.mgz"),
        os.path.join(config['SUBJECTS_DIR'], '{subject}', "surf", "rh.benson14_sigma.mgz"),
    benchmark:
        os.path.join(config['DATA_DIR'], 'code', 'atlas_generation', 'sub-{subject}_benchmark.txt')
    log:
        os.path.join(config['DATA_DIR'], 'code', 'atlas_generation', 'sub-{subject}-%j.log')
    shell:
        "python -m neuropythy benson14_retinotopy {wildcards.subject} -v --surf-format=mgz"


rule bayesian_retinotopy:
    input:
        os.path.join(config['SUBJECTS_DIR'], '{subject}', "surf", "lh.benson14_varea.mgz"),
        os.path.join(config['SUBJECTS_DIR'], '{subject}', "surf", "lh.benson14_eccen.mgz"),
        os.path.join(config['SUBJECTS_DIR'], '{subject}', "surf", "lh.benson14_angle.mgz"),
        os.path.join(config['SUBJECTS_DIR'], '{subject}', "surf", "lh.benson14_sigma.mgz"),
        os.path.join(config['SUBJECTS_DIR'], '{subject}', "surf", "rh.benson14_varea.mgz"),
        os.path.join(config['SUBJECTS_DIR'], '{subject}', "surf", "rh.benson14_eccen.mgz"),
        os.path.join(config['SUBJECTS_DIR'], '{subject}', "surf", "rh.benson14_angle.mgz"),
        os.path.join(config['SUBJECTS_DIR'], '{subject}', "surf", "rh.benson14_sigma.mgz"),
        os.path.join(config["DATA_DIR"], "derivatives", "vistasoft", "sub-{subject}", "{session}", "Outputs", "lh.full-angle.mgz"),
        os.path.join(config["DATA_DIR"], "derivatives", "vistasoft", "sub-{subject}", "{session}", "Outputs", "lh.full-eccen.mgz"),
        os.path.join(config["DATA_DIR"], "derivatives", "vistasoft", "sub-{subject}", "{session}", "Outputs", "lh.full-vexpl.mgz"),
        os.path.join(config["DATA_DIR"], "derivatives", "vistasoft", "sub-{subject}", "{session}", "Outputs", "lh.full-sigma.mgz"),
        os.path.join(config["DATA_DIR"], "derivatives", "vistasoft", "sub-{subject}", "{session}", "Outputs", "rh.full-angle.mgz"),
        os.path.join(config["DATA_DIR"], "derivatives", "vistasoft", "sub-{subject}", "{session}", "Outputs", "rh.full-eccen.mgz"),
        os.path.join(config["DATA_DIR"], "derivatives", "vistasoft", "sub-{subject}", "{session}", "Outputs", "rh.full-vexpl.mgz"),
        os.path.join(config["DATA_DIR"], "derivatives", "vistasoft", "sub-{subject}", "{session}", "Outputs", "rh.full-sigma.mgz"),
    output:
        os.path.join(config["DATA_DIR"], "derivatives", "vistasoft", "sub-{subject}", "{session}", "Outputs", "lh.inferred_sigma.mgz"),
        os.path.join(config["DATA_DIR"], "derivatives", "vistasoft", "sub-{subject}", "{session}", "Outputs", "lh.inferred_varea.mgz"),
        os.path.join(config["DATA_DIR"], "derivatives", "vistasoft", "sub-{subject}", "{session}", "Outputs", "lh.inferred_angle.mgz"),
        os.path.join(config["DATA_DIR"], "derivatives", "vistasoft", "sub-{subject}", "{session}", "Outputs", "lh.inferred_eccen.mgz"),
        os.path.join(config["DATA_DIR"], "derivatives", "vistasoft", "sub-{subject}", "{session}", "Outputs", "rh.inferred_sigma.mgz"),
        os.path.join(config["DATA_DIR"], "derivatives", "vistasoft", "sub-{subject}", "{session}", "Outputs", "rh.inferred_varea.mgz"),
        os.path.join(config["DATA_DIR"], "derivatives", "vistasoft", "sub-{subject}", "{session}", "Outputs", "rh.inferred_angle.mgz"),
        os.path.join(config["DATA_DIR"], "derivatives", "vistasoft", "sub-{subject}", "{session}", "Outputs", "rh.inferred_eccen.mgz"),
    benchmark:
        os.path.join(config['DATA_DIR'], 'code', 'bayesian_retinotopy', 'sub-{subject}_{session}_benchmark.txt')
    log:
        os.path.join(config['DATA_DIR'], 'code', 'bayesian_retinotopy', 'sub-{subject}_{session}-%j.log')
    params:
        output_dir = lambda wildcards, output: os.path.dirname(output[0])
    shell:
        "python -m neuropythy register_retinotopy {wildcards.subject} --verbose "
        "--surf-outdir={params.output_dir} --surf-format=mgz --no-volume-export "
        "--lh-angle={input[8]} --lh-eccen={input[9]} --lh-weight={input[10]} "
        "--lh-radius={input[11]} --rh-angle={input[12]} --rh-eccen={input[13]} "
        "--rh-weight={input[14]} --rh-radius={input[15]}"


# this is also only necessary because symlinks aren't working. and it's not that elegant: should we
# always copy back? what if the output already exists?
def get_3danatomy_input(wildcards):
    path_template = os.path.join(config["DATA_DIR"], "derivatives", "vistasoft", "sub-{subject}",
                                 "{session}", "3DAnatomy", "Left", "3DMeshes", "Left_inflated.mat")
    if len(config['SESSIONS'][wildcards.subject]) > 1:
        raise Exception("Don't know how to handle more than one session per subject; which "
                        "3DAnatomy to use!?")
    session = config['SESSIONS'][wildcards.subject][0]
    return path_templat.format(session=session, **wildcards)


rule copy_to_anatomy_project:
    input:
        get_3danatomy_input,
    output:
        os.path.join(config["ANATOMY_DIR"], "{subject}", "Left", "3DMeshes", "Left_inflated.mat"),
    params:
        input_dir = lambda wildcards, input: input.replace(os.path.join('Left', "3DMeshes", "Left_inflated.mat"), ''),
        output_dir = lambda wildcards, input: output.replace(os.path.join('Left', "3DMeshes", "Left_inflated.mat"), ''),
    shell:
        "rsync -avPLuz {params.input_dir} {params.output_dir}"
